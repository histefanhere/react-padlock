{"version":3,"sources":["components/Digit.tsx","components/shackle.svg","components/Shackle.tsx","components/happypepe.png","components/sadpepe.png","components/Pepe.tsx","components/Padlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Digit","props","digit","digitID","className","onClick","value","Shackle","easing","locked","duration","loop","autoplay","translateY","src","shackle","alt","Pepe","HappyPepe","style","display","visible","happy","SadPepe","Padlock","min","max","initialValues","Array","i","length","Math","floor","random","useState","values","setValues","setLockState","pepeHappy","setPepeHappy","pepeVisible","setPepeVisibility","correctValues","ref","React","createRef","handleClick","id","direc","newValues","slice","showPepe","setTimeout","isCorrect","current","anime","targets","translateX","App","href","octoColor","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUA4BeA,MAjBf,SAAgBC,GAIZ,IAAMC,EAAQD,EAAME,QAEpB,OACI,sBAAKC,UAAU,QAAf,UACI,wBAAQA,UAAU,YAAYC,QAAS,WAAQJ,EAAMI,QAAQH,EAAO,IAApE,SAA0E,2BAC1E,qBAAKE,UAAU,cAAf,mBACQH,EAAMK,SAEd,wBAAQF,UAAU,YAAYC,QAAS,WAAQJ,EAAMI,QAAQH,GAAQ,IAArE,SAA2E,+B,gBCvBxE,MAA0B,oCCwB1BK,MAdf,SAAiBN,GACb,OACI,cAAC,IAAD,CACIO,OAAQP,EAAMQ,OAAS,aAAe,cACtCC,SAAU,IACVC,MAAM,EACNC,UAAU,EACVC,WAAYZ,EAAMQ,OAAS,QAAU,OALzC,SAOI,8BAAK,qBAAKK,IAAKC,EAASC,IAAI,UAAUZ,UAAU,iBCnB7C,MAA0B,sCCA1B,MAA0B,oC,MC6B1Ba,MAnBf,SAAchB,GACV,OACI,sBAAKG,UAAU,OAAf,UACI,qBACIU,IAAKI,EACLF,IAAI,aACJG,MAAO,CACHC,QAAUnB,EAAMoB,SAAWpB,EAAMqB,MAAS,QAAU,UAE5D,qBACIR,IAAKS,EACLP,IAAI,UACJG,MAAO,CACHC,QAAUnB,EAAMoB,UAAapB,EAAMqB,MAAU,QAAU,cCyF5DE,MAlGf,WAGI,IADA,IAPeC,EAAaC,EAOxBC,EAA0BC,MAAM,GAC3BC,EAAE,EAAGA,EAAEF,EAAcG,OAAQD,IAAKF,EAAcE,IAR1CJ,EAQyD,EAR5CC,EAQ+C,EAPpEK,KAAKC,MAAMD,KAAKE,UAAYP,EAAMD,EAAM,GAAKA,IASpD,MAA4BS,mBAASP,GAArC,mBAAOQ,EAAP,KAAeC,EAAf,KACA,EAA+BF,oBAAS,GAAxC,mBAAOzB,EAAP,KAAe4B,EAAf,KAEA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAyCL,oBAAS,GAAlD,mBAAOM,EAAP,KAAoBC,EAApB,KAEMC,EAAgB,CAAC,EAAG,EAAG,GAGvBC,EAAMC,IAAMC,YAOZC,EAAc,SAACC,EAAYC,GAC7B,GAAKvC,EAAL,CAIA,IAAIwC,EAA2Bd,EAAOe,QACtCD,EAAUF,IAAOE,EAAUF,GAAMC,EAAQ,IAAM,GAC/CZ,EAAUa,KA6CRE,EAAW,SAAC7B,GACdiB,EAAajB,GACbmB,GAAkB,GAClBW,YAAW,WAAOX,GAAkB,KAAS,MAGjD,OACI,sBAAKrC,UAAU,cAAf,UACI,cAAC,EAAD,CAAMkB,MAAOgB,EAAWjB,QAASmB,IACjC,sBAAKpC,UAAU,UAAUuC,IAAKA,EAA9B,UACI,cAAC,EAAD,CAASlC,OAAQA,IACjB,sBAAKL,UAAU,eAAf,UAEI,cAAC,EAAD,CAAOD,QAAS,EAAGG,MAAO6B,EAAO,GAAI9B,QAASyC,IAC9C,cAAC,EAAD,CAAO3C,QAAS,EAAGG,MAAO6B,EAAO,GAAI9B,QAASyC,IAC9C,cAAC,EAAD,CAAO3C,QAAS,EAAGG,MAAO6B,EAAO,GAAI9B,QAASyC,UAGtD,qBAAK1C,UAAU,OAAf,SACI,wBAAQA,UAAU,eAAeC,QAjD5B,YAVC,WACd,IAAK,IAAIwB,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAIM,EAAON,KAAOa,EAAcb,GAC5B,OAAO,EAGf,OAAO,GAKkBwB,IAEjB5C,GAEA0C,GAAS,GA9BjBd,GAAc5B,KAoCV0C,GAAS,GAELR,GAAOA,EAAIW,SACXC,kBAAM,CACFC,QAASb,EAAIW,QACbG,WAAY,CACR,CAAEnD,MAAO,OACT,CAAEA,MAAO,QACT,CAAEA,MAAO,OACT,CAAEA,MAAO,QAEbI,SAAU,IACVE,UAAU,EACVJ,OAAQ,oBAyBZ,4BC1FDkD,MAVf,WACE,OACE,sBAAKtD,UAAU,MAAf,UACE,cAAC,IAAD,CAAcuD,KAAK,gDAAgDC,UAAU,SAC7E,cAAC,EAAD,IACA,gEAAwB,mBAAGD,KAAK,kCAAkCE,OAAO,SAASC,IAAI,sBAA9D,0BAAxB,UAAmI,mBAAGH,KAAK,6EAA6EE,OAAO,SAASC,IAAI,sBAAzG,+CCG1HC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.851d4f1c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Digit.scss';\r\n\r\ninterface DigitProps {\r\n    value: number;\r\n    digitID: number;\r\n    // the onClick event hook gets passed which digit this is and a direction\r\n    // 1 for an increase and -1 for a decrease.\r\n    onClick: (digitID: number, direc: number) => void;\r\n}\r\n\r\nfunction Digit (props: DigitProps) {\r\n    // Digit is a completely controlled component - everything is defined\r\n    // through it's props, and it stores no state of itself.\r\n\r\n    const digit = props.digitID;\r\n\r\n    return (\r\n        <div className=\"digit\">\r\n            <button className=\"digit-btn\" onClick={() => { props.onClick(digit, 1) }}><span></span></button>\r\n            <div className=\"digit-label\">\r\n                {`${props.value}`}\r\n            </div>\r\n            <button className=\"digit-btn\" onClick={() => { props.onClick(digit, -1) }}><span></span></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Digit;","export default __webpack_public_path__ + \"static/media/shackle.74810022.svg\";","import React from 'react';\r\nimport Anime from 'react-anime';\r\n\r\nimport './Padlock.scss';\r\nimport shackle from './shackle.svg';\r\n\r\ninterface ShackleProps {\r\n    locked: boolean;\r\n}\r\n\r\nfunction Shackle(props: ShackleProps) {\r\n    return (\r\n        <Anime \r\n            easing={props.locked ? \"easeInBack\" : \"easeOutBack\"}\r\n            duration={400}\r\n            loop={false}\r\n            autoplay={true}\r\n            translateY={props.locked ? \"160px\" : \"40px\"}\r\n        >\r\n            <div><img src={shackle} alt=\"shackle\" className=\"shackle\"/></div>\r\n        </Anime>\r\n    )\r\n}\r\n\r\nexport default Shackle;","export default __webpack_public_path__ + \"static/media/happypepe.a3b7b4d2.png\";","export default __webpack_public_path__ + \"static/media/sadpepe.e2e87c09.png\";","import HappyPepe from './happypepe.png';\r\nimport SadPepe from './sadpepe.png';\r\n\r\nimport './pepe.scss';\r\n\r\ninterface PepeProps {\r\n    visible: boolean,\r\n    happy: boolean\r\n}\r\n\r\nfunction Pepe(props: PepeProps) {\r\n    return (\r\n        <div className=\"pepe\">\r\n            <img\r\n                src={HappyPepe}\r\n                alt=\"Happy Pepe\"\r\n                style={{\r\n                    display: (props.visible && props.happy) ? \"block\" : \"none\"\r\n                }}/>\r\n            <img\r\n                src={SadPepe}\r\n                alt=\"SadPepe\"\r\n                style={{\r\n                    display: (props.visible && (!props.happy)) ? \"block\" : \"none\"\r\n                }}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pepe;","import React, { useState } from 'react';\r\nimport anime from 'animejs';\r\n\r\nimport './Padlock.scss';\r\nimport Digit from './Digit';\r\nimport Shackle from './Shackle';\r\nimport Pepe from './Pepe';\r\n\r\n// Utility function for randomly generating a number (inclusive)\r\nconst randomInt = (min: number, max: number): number => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n\r\nfunction Padlock() {\r\n    // Generate a list of 3 random numbers to be the initial values of the counters\r\n    let initialValues: number[] = Array(3)\r\n    for (let i=0; i<initialValues.length; i++) initialValues[i] = randomInt(0, 9);\r\n\r\n    const [values, setValues] = useState(initialValues);\r\n    const [locked, setLockState] = useState(true);\r\n\r\n    const [pepeHappy, setPepeHappy] = useState(false);\r\n    const [pepeVisible, setPepeVisibility] = useState(false);\r\n\r\n    const correctValues = [1, 2, 3];\r\n\r\n    // Reference to itself so we can animate the padlock\r\n    const ref = React.createRef<HTMLDivElement>();\r\n\r\n    // Locks or Unlocks the padlock\r\n    const toggleLock = () => {\r\n        setLockState(!locked);\r\n    }\r\n\r\n    const handleClick = (id: number, direc: number) => {\r\n        if (!locked) {\r\n            return;\r\n        }\r\n        // Keeps `values` immutable\r\n        let newValues: Array<number> = values.slice();\r\n        newValues[id] = (newValues[id] + direc + 10) % 10;\r\n        setValues(newValues);\r\n    }\r\n\r\n    // Function compares if the stored `values` state is equivalent to `correctValues`\r\n    // By comparing each individual element.\r\n    const isCorrect = () => {\r\n        for (let i = 0; i < 3; i++) {\r\n            if (values[i] !== correctValues[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Called when the \"validate\" button is pressed\r\n    const validate = () => {\r\n        const correct: boolean = isCorrect();\r\n        if (correct) {\r\n            if (locked) {\r\n                // Lock was just unlocked\r\n                showPepe(true);\r\n            }\r\n            // If they're right, toggle the locked state\r\n            toggleLock();\r\n        }\r\n        else {\r\n            showPepe(false);\r\n            // If they're wrong, show the incorrect animation (shaking the padlock)\r\n            if (ref && ref.current) {\r\n                anime({\r\n                    targets: ref.current,\r\n                    translateX: [\r\n                        { value: '5px' },\r\n                        { value: '-5px' },\r\n                        { value: '5px' },\r\n                        { value: '0px' }\r\n                    ],\r\n                    duration: 400,\r\n                    autoplay: true,\r\n                    easing: 'easeInOutSine'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const showPepe = (happy: boolean) => {\r\n        setPepeHappy(happy);\r\n        setPepeVisibility(true);\r\n        setTimeout(() => {setPepeVisibility(false)}, 1000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"padlock-app\">\r\n            <Pepe happy={pepeHappy} visible={pepeVisible}/>\r\n            <div className=\"padlock\" ref={ref}>\r\n                <Shackle locked={locked}/>\r\n                <div className=\"padlock-body\">\r\n                    {/* This could be done in a loop, but it'd be more effort than it's worth. */}\r\n                    <Digit digitID={0} value={values[0]} onClick={handleClick}/>\r\n                    <Digit digitID={1} value={values[1]} onClick={handleClick}/>\r\n                    <Digit digitID={2} value={values[2]} onClick={handleClick}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"btns\">\r\n                <button className=\"validate-btn\" onClick={validate}>Validate</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Padlock;","import React from 'react';\r\nimport './App.scss';\r\nimport GithubCorner from 'react-github-corner';\r\n\r\nimport Padlock from './components/Padlock';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GithubCorner href=\"https://github.com/histefanhere/react-padlock\" octoColor='teal' />\r\n      <Padlock />\r\n      <footer>Made with ❤️ by <a href=\"https://github.com/histefanhere\" target=\"_blank\" rel=\"noopener noreferrer\">Histefanhere</a> for a <a href=\"https://github.com/NZMSA/2021-introduction-to-general-software-development\" target=\"_blank\" rel=\"noopener noreferrer\">NZMSA Workshop Competition</a></footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}